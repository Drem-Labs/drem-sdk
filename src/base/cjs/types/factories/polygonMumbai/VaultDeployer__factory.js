"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.VaultDeployer__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                internalType: "address",
                name: "_dremHub",
                type: "address",
            },
            {
                internalType: "address",
                name: "_assetRegistryAddress",
                type: "address",
            },
            {
                internalType: "address",
                name: "_priceAggregatorAddress",
                type: "address",
            },
            {
                internalType: "address",
                name: "_feeControllerAddress",
                type: "address",
            },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        inputs: [],
        name: "NotHubOwner",
        type: "error",
    },
    {
        inputs: [],
        name: "ProtocolPausedOrFrozen",
        type: "error",
    },
    {
        inputs: [],
        name: "ZeroAddress",
        type: "error",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "address",
                name: "previousAdmin",
                type: "address",
            },
            {
                indexed: false,
                internalType: "address",
                name: "newAdmin",
                type: "address",
            },
        ],
        name: "AdminChanged",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "beacon",
                type: "address",
            },
        ],
        name: "BeaconUpgraded",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint8",
                name: "version",
                type: "uint8",
            },
        ],
        name: "Initialized",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "implementation",
                type: "address",
            },
        ],
        name: "Upgraded",
        type: "event",
    },
    {
        inputs: [],
        name: "DREM_HUB",
        outputs: [
            {
                internalType: "contract DremHub",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "address",
                        name: "admin",
                        type: "address",
                    },
                    {
                        internalType: "string",
                        name: "name",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "symbol",
                        type: "string",
                    },
                    {
                        internalType: "address",
                        name: "denominationAsset",
                        type: "address",
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "interactionAddress",
                                type: "address",
                            },
                            {
                                internalType: "uint8",
                                name: "parentIndex",
                                type: "uint8",
                            },
                            {
                                internalType: "uint256",
                                name: "windPercent",
                                type: "uint256",
                            },
                            {
                                internalType: "bytes",
                                name: "fixedArgData",
                                type: "bytes",
                            },
                        ],
                        internalType: "struct DataTypes.StepInfo[]",
                        name: "steps",
                        type: "tuple[]",
                    },
                    {
                        components: [
                            {
                                internalType: "uint24",
                                name: "entranceFee",
                                type: "uint24",
                            },
                            {
                                internalType: "uint24",
                                name: "exitFee",
                                type: "uint24",
                            },
                            {
                                internalType: "uint24",
                                name: "performanceFee",
                                type: "uint24",
                            },
                            {
                                internalType: "uint24",
                                name: "managementFee",
                                type: "uint24",
                            },
                            {
                                internalType: "address",
                                name: "collector",
                                type: "address",
                            },
                        ],
                        internalType: "struct DataTypes.FeeInfo",
                        name: "feeInfo",
                        type: "tuple",
                    },
                ],
                internalType: "struct DataTypes.DeploymentInfo",
                name: "_deploymentInfo",
                type: "tuple",
            },
            {
                internalType: "bytes[]",
                name: "_variableEncodedArgs",
                type: "bytes[]",
            },
        ],
        name: "deployVault",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "getVaultImplementation",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "init",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "proxiableUUID",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "newImplementation",
                type: "address",
            },
        ],
        name: "upgradeTo",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "newImplementation",
                type: "address",
            },
            {
                internalType: "bytes",
                name: "data",
                type: "bytes",
            },
        ],
        name: "upgradeToAndCall",
        outputs: [],
        stateMutability: "payable",
        type: "function",
    },
];
class VaultDeployer__factory {
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
VaultDeployer__factory.abi = _abi;
exports.VaultDeployer__factory = VaultDeployer__factory;
